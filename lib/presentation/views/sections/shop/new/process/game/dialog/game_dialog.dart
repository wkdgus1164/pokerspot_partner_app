import 'package:flutter/material.dart';
import 'package:pokerspot_partner_app/common/constants/sizes.dart';
import 'package:pokerspot_partner_app/common/theme/color.dart';
import 'package:pokerspot_partner_app/data/models/store/mtt_game.dart';
import 'package:pokerspot_partner_app/presentation/effects/card_shadow.dart';
import 'package:pokerspot_partner_app/presentation/views/sections/shop/new/process/game/dialog/everyday.dart';
import 'package:pokerspot_partner_app/presentation/views/sections/shop/new/process/game/dialog/max_entry.dart';
import 'package:pokerspot_partner_app/presentation/views/sections/shop/new/process/game/dialog/min_entry.dart';
import 'package:pokerspot_partner_app/presentation/views/sections/shop/new/process/game/dialog/prize.dart';
import 'package:pokerspot_partner_app/presentation/views/sections/shop/new/process/game/dialog/register_fee.dart';
import 'package:pokerspot_partner_app/presentation/views/sections/shop/new/process/game/dialog/target.dart';
import 'package:pokerspot_partner_app/presentation/views/sections/shop/new/process/game/dialog/toner_name.dart';
import 'package:pokerspot_partner_app/presentation/views/sections/shop/new/process/game/dialog/toner_type.dart';

class GameDialog extends StatefulWidget {
  const GameDialog({
    super.key,
    required this.game,
    this.isEdit = false,
    required this.onConfirm,
  });

  final MttGameModel game;
  final bool isEdit;
  final Function(MttGameModel) onConfirm;

  @override
  State<GameDialog> createState() => _GameDialogState();
}

class _GameDialogState extends State<GameDialog> {
  late MttGameModel _game;

  String setTitle() {
    switch (_game.type) {
      case TonerType.daily:
        return '${_game.entryPrice ~/ 10000}만 데일리 토너먼트';
      case TonerType.seed:
        return '${_game.entryPrice ~/ 10000}만 ${_game.targetMttName.replaceAll('토너먼트', '')} 시드권 토너먼트';
      case TonerType.gtd:
        return '${_game.gtdMinReward ~/ 10000}만 GTD 토너먼트';
      default:
        return '알수없음';
    }
  }

  @override
  void initState() {
    super.initState();

    _game = widget.game;
  }

  @override
  Widget build(BuildContext context) {
    _game = _game.copyWith(name: setTitle());

    return Container(
      width: MediaQuery.of(context).size.width / 0.5,
      padding: const EdgeInsets.all(padding16),
      clipBehavior: Clip.antiAlias,
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(8),
        boxShadow: [cardShadow],
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          GameDialogTonerName(
            name: _game.name,
            isAutoGenerated: true,
          ),
          const SizedBox(height: padding10),
          SizedBox(
            width: double.infinity,
            child: Text(
              '아래 조건을 설정하면 자동으로 생성됩니다.',
              style: Theme.of(context).textTheme.labelSmall!.copyWith(
                    fontWeight: FontWeight.bold,
                    color: customColorScheme.onSurface4,
                    letterSpacing: 0,
                  ),
            ),
          ),
          const Divider(height: padding24),

          // 매일 진행 여부
          GameDialogEveryday(
            isSwitchOn: _game.isDaily,
            onSwitchPressed: (v) {
              setState(() {
                _game = _game.copyWith(isDaily: v);
              });
            },
          ),
          const SizedBox(height: padding10),

          // 토너 종류
          GameDialogTonerType(
            isSelected: true,
            selectedValue: _game.type.kr,
            onTap: (type) {
              setState(() {
                _game = _game.copyWith(type: type);
                Navigator.pop(context);
              });
            },
          ),
          const SizedBox(height: padding10),

          // 참가비
          GameDialogRegisterFee(
            isSelected: true,
            selectedValue: '${(_game.entryPrice ~/ 10000)}만',
            onTap: (entryPrice) {
              setState(() {
                _game = _game.copyWith(entryPrice: entryPrice);
                Navigator.pop(context);
              });
            },
          ),
          const SizedBox(height: padding10),

          // 최소 엔트리
          GameDialogMinEntry(
            isSelected: true,
            selectedValue: _game.entryMin,
            onTap: (value) {
              setState(() {
                _game = _game.copyWith(entryPrice: value);
                Navigator.pop(context);
              });
            },
          ),
          const SizedBox(height: padding10),

          // 최대 엔트리
          GameDialogMaxEntry(
              isSelected: true,
              selectedValue: _game.entryMax,
              onInfinitePressed: () {
                setState(() {
                  _game = _game.copyWith(
                      entryMax: _game.entryMax == null ? 0 : null);
                });
              },
              isInfinite: _game.entryMax == null,
              onTap: (value) {
                setState(() {
                  _game = _game.copyWith(entryMax: value);
                  Navigator.pop(context);
                });
              }),
          const SizedBox(height: padding24),

          // 프라이즈
          GameDialogPrize(
            isSelected: true,
            selectedValue: _game.prize,
            onTap: (value) {
              setState(() {
                _game = _game.copyWith(prize: value);
                Navigator.pop(context);
              });
            },
          ),
          const SizedBox(height: padding10),

          // 타겟 토너
          GameDialogTarget(
            isSelected: true,
            selectedValue: _game.targetMttName,
            onTextFieldChanged: (value) {
              _game = _game.copyWith(targetMttName: value);
            },
          ),
          const SizedBox(height: padding10),

          // 추가하기
          FilledButton(
            child: Text(widget.isEdit ? '변경하기' : '추가하기'),
            onPressed: () => widget.onConfirm.call(_game),
          ),
        ],
      ),
    );
  }
}
